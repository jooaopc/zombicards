{"version":3,"sources":["pages/Dashboard/Zumbis.tsx","pages/Dashboard/Perigo.tsx","components/Card/styles.ts","components/Card/index.tsx","pages/Dashboard/styles.ts","img/zombi-spawn-cards.jpg","pages/Dashboard/index.tsx","styles/global.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Quantidade","styled","strong","_templateObject","_taggedTemplateLiteral","Zumbis","_ref","zumbi","_jsxs","_Fragment","children","_jsx","quantidade","tipo","Container","div","Button","button","_templateObject2","p","color","active","Perigo","perigo","setPerigo","aria-label","onClick","_","InnerCard","_templateObject3","isClicked","CardFace","_templateObject4","Card","proximoCard","children1","children2","transformChildren1","transformChildren2","_useState","useState","_useState2","_slicedToArray","setIsClicked","_useState3","_useState4","transformChildren1Modified","setTransformChildren1Modified","_useState5","_useState6","transformChildren2Modified","setTransformChildren2Modified","useEffect","className","main","perigoColor","FooterCard","perigoColorDicionario","azul","amarelo","laranja","vermelho","Dashboard","baralho","cardsRemanecentes","setCardsRemanecentes","cardAtual","setCardAtual","zumbiAtual","setZumbiAtual","_useState7","_useState8","_useState9","_useState10","setPerigoColor","cardsSobrando","filter","c","id","length","indexCard","Math","floor","random","src","spawn","alt","collection","GlobalStyle","createGlobalStyle","App","typedcards","setTypedcards","cards","GithubCorner","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById","URL","process","origin","addEventListener","concat","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2b504212.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst Quantidade = styled.strong`\n  &::before {\n    content: 'x';\n  }\n`\n\ninterface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n    | \"abominação maculada\"\n    | \"balofo\"\n    | \"lerdo\"\n    | \"lerdo maculado\"\n    | \"corredor\"\n    | \"necromante\"\n    | \"horda\";\n}\n\ninterface ZumbisProps {\n  zumbi: PerigoZumbi;\n}\n\nexport const Zumbis = ({ zumbi }: ZumbisProps) => {\n  const nenhumZumbi = () => <>\n      <span>\n        🍀😁🎉\n      </span>\n      <span>\n        não veio nada\n      </span>\n  </>;\n  const ativacaoExtra = () => (\n    <>\n      <span>\n        ⚡⚡⚡\n      </span>\n      <span>\n        <strong>nova ativação</strong>\n      </span>\n      <span>\n        {zumbi.tipo}\n      </span>\n    </>\n  );\n  const ehVazio = () => {\n    if (!zumbi) return false;\n    return !zumbi.tipo && !zumbi.quantidade;\n  };\n\n  const ehAtivacaoExtra = () => {\n    if (!zumbi) return false;\n    return !zumbi.quantidade && zumbi.tipo;\n  };\n\n  const ehNormal = () => {\n    if (!zumbi) return false;\n    return !!zumbi.quantidade && !!zumbi.tipo;\n  };\n\n  return (\n    <>\n      {!zumbi && <div>Começar?</div>}\n      {ehAtivacaoExtra() && ativacaoExtra()}\n      {ehVazio() && nenhumZumbi()}\n      {ehNormal() && (\n        <>\n        <span>\n          🔥🔥🔥\n        </span>\n        <span>\n          <Quantidade>{zumbi.quantidade}</Quantidade>\n        </span>\n        <span>\n          {zumbi.tipo}\n        </span>\n        </>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n\n  div {\n    display: flex;\n    max-width: 1000px;\n  }\n\n  padding-bottom: 1rem;\n`\n\ninterface ButtonProps {\n  active: boolean;\n  color: string;\n}\n\nconst Button = styled.button<ButtonProps>`\n  padding: 1rem 2rem;\n\n  width: 100%;\n  background: var(--${p => p.color});\n  opacity: ${p => p.active ? '1' : '0.1'};\n  border: ${p => p.active ? '0.2rem solid black' : '0px'};\n  font-weight: bold;\n`\n\ninterface PerigoProps {\n  perigo: CorPerigo;\n  setPerigo: (p: CorPerigo) => void;\n}\n\ntype CorPerigo = \"azul\" | \"amarelo\" | \"laranja\" | \"vermelho\";\n\nexport const Perigo = ({ perigo, setPerigo }: PerigoProps) => {\n  return (\n      <Container>\n      <div>\n        <Button\n          aria-label=\"Azul\"\n          color=\"blue\"\n          active={perigo === \"azul\"}\n          onClick={_ => setPerigo(\"azul\")}\n        />\n\n        <Button\n          aria-label=\"Amarelo\"\n          color=\"yellow\"\n          active={perigo === \"amarelo\"}\n          onClick={_ => setPerigo(\"amarelo\")}\n        />\n\n        <Button\n          aria-label=\"Laranja\"\n          color=\"orange\"\n          active={perigo === \"laranja\"}\n          onClick={_ => setPerigo(\"laranja\")}\n        />\n\n        <Button\n          aria-label=\"Vermelho\"\n          color=\"red\"\n          active={perigo === \"vermelho\"}\n          onClick={_ => setPerigo(\"vermelho\")}\n        />\n      </div>\n      </Container>\n  );\n};\n","import styled from 'styled-components'\n\ninterface ZombieButton {\n  isClicked: boolean\n}\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nexport const Button = styled.button`\n  background: transparent;\n  border: 0;\n  padding: 0;\n\n  width: 100%;\n  max-width: 300px;\n\n  perspective: 1000px;\n`\n\nexport const InnerCard = styled.div<ZombieButton>`\n  padding-top: 155%;\n  width: 100%;\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n\n  transform: ${(p) => p.isClicked ? 'rotateY(180deg)' : 'none'};\n  content: ${(p) => p.isClicked ? '' : ''};\n\n  position:relative;\n  float: left;\n`\n\nexport const CardFace = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  backface-visibility: hidden;\n  background-image: linear-gradient(#6a1610, #c82b2c, #6a1610);\n  border-radius: 10px;\n\n  div + & {\n    transform: rotateY(180deg);\n  }\n\n  & > * {\n    border: 2px solid var(--black);\n    background: var(--white);\n    font-size: 2rem;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    margin: 0.5rem 0;\n\n    width: 80%;\n  }\n\n  .empty {\n    border: 0;\n    margin: 0;\n    padding: 0;\n  }\n\n\n  img {\n    border: 0;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    max-width: 300px;\n    border-radius: 10px;\n  }\n`\n","import { useState, useEffect, ReactNode } from 'react'\n\nimport { Container, Button, InnerCard, CardFace } from './styles'\n\ninterface CardProps {\n  proximoCard: () => void;\n  children1: ReactNode;\n  transformChildren1?: ReactNode;\n  children2: ReactNode;\n  transformChildren2?: ReactNode;\n}\n\n// THANKS:\n// - https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_flip_card\n// - https://codepen.io/desandro/pen/LmWoWe\n// - https://stackoverflow.com/a/12121309\n// - https://www.w3schools.com/howto/howto_css_aspect_ratio.asp\nexport function Card({\n  proximoCard,\n  children1,\n  children2,\n  transformChildren1,\n  transformChildren2\n}: CardProps) {\n  const [ isClicked, setIsClicked ] = useState(false)\n  const [ transformChildren1Modified, setTransformChildren1Modified ] = useState(transformChildren1)\n  const [ transformChildren2Modified, setTransformChildren2Modified ] = useState(transformChildren2)\n\n  useEffect(() => {\n    if(!transformChildren1){\n      setTransformChildren1Modified(<span className=\"empty\"></span>)\n    }\n  }, [transformChildren1])\n\n  useEffect(() => {\n    if(!transformChildren2){\n      setTransformChildren2Modified(<span className=\"empty\"></span>)\n    }\n  }, [transformChildren2])\n\n  function handleClick(){\n    proximoCard()\n    setIsClicked(!isClicked)\n  }\n  return (\n    <Container onClick={handleClick} >\n      <Button>\n      <InnerCard isClicked={isClicked}>\n        <CardFace className=\"card front\">\n          {isClicked && transformChildren1Modified}\n          {!isClicked && children1}\n        </CardFace>\n        <CardFace className=\"card back\">\n          {!isClicked && transformChildren2Modified}\n          {isClicked && children2}\n        </CardFace>\n      </InnerCard>\n      </Button>\n    </Container>\n  )\n}\n","import styled from 'styled-components'\n\ninterface ContainerProps {\n  perigoColor: string;\n}\n\nexport const Container = styled.main<ContainerProps>`\n  margin: 0 0;\n  padding: 2.5rem 1rem;\n  height: 100vh;\n\n  background-image: linear-gradient(to top, var(--${p => p.perigoColor}), var(--background));\n`\n\nexport const FooterCard = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n\n  color: black;\n\n  ul {\n    margin-right: 1rem;\n  }\n`\n","export default __webpack_public_path__ + \"static/media/zombi-spawn-cards.e3e0bf1a.jpg\";","import { useState, useEffect } from \"react\";\nimport { Zumbis } from \"./Zumbis\";\nimport { Perigo } from \"./Perigo\";\nimport { Card } from \"../../components/Card\";\n\nimport { Container, FooterCard } from './styles'\n\nimport spawn from '../../img/zombi-spawn-cards.jpg'\n\nconst perigoColorDicionario = {\n  azul: \"blue\",\n  amarelo: \"yellow\",\n  laranja: \"orange\",\n  vermelho: \"red\"\n}\n\ninterface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n      | \"abominação maculada\"\n        | \"balofo\"\n          | \"lerdo\"\n            | \"lerdo maculado\"\n              | \"corredor\"\n                | \"necromante\"\n                  | \"horda\";\n}\n\ntype CorPerigo = \"azul\" | \"amarelo\" | \"laranja\" | \"vermelho\";\n\ninterface CardZumbi {\n  id: number;\n  collection: string;\n  azul: PerigoZumbi;\n  amarelo: PerigoZumbi;\n  laranja: PerigoZumbi;\n  vermelho: PerigoZumbi;\n}\n\ninterface DashboardProps {\n  baralho: CardZumbi[];\n}\n\nexport function Dashboard({ baralho }: DashboardProps) {\n  const [cardsRemanecentes, setCardsRemanecentes] = useState([] as CardZumbi[]);\n  const [cardAtual, setCardAtual] = useState({} as CardZumbi);\n  const [zumbiAtual, setZumbiAtual] = useState({} as PerigoZumbi);\n  const [perigo, setPerigo] = useState(\"azul\" as CorPerigo);\n  const [perigoColor, setPerigoColor] = useState(\"\");\n\n  useEffect(() => {\n    setCardsRemanecentes(baralho);\n  }, [baralho]);\n\n  useEffect(() => {\n    setZumbiAtual(cardAtual[perigo]);\n\n    let cardsSobrando = cardsRemanecentes.filter(c => c.id !== cardAtual.id)\n\n    if (!!cardsRemanecentes.length && cardsSobrando.length !== cardsRemanecentes.length) {\n      setCardsRemanecentes(cardsSobrando)\n    }\n  }, [cardAtual, perigo, cardsRemanecentes]);\n\n  useEffect(() => {\n    if (!cardsRemanecentes.length) {\n      const cardsEmbaralhados = baralho;\n      setCardsRemanecentes(cardsEmbaralhados);\n    }\n  }, [cardsRemanecentes, baralho])\n\n  useEffect(() => {\n    setPerigoColor(perigoColorDicionario[perigo])\n  }, [perigo]);\n\n  function handleProximoCard() {\n    const indexCard = Math.floor(Math.random() * (cardsRemanecentes.length - 1 - 0 + 1)) + 0\n    setCardAtual(cardsRemanecentes[indexCard]);\n  }\n\n  return (\n    <Container\n      perigoColor={perigoColor}\n    >\n      \n      <Perigo perigo={perigo} setPerigo={setPerigo} />\n\n      <Card\n        proximoCard={handleProximoCard}\n        children1={!!zumbiAtual ? <Zumbis zumbi={zumbiAtual} /> : <img src={spawn} alt=\"verso carta de zumbi\"/>}\n        children2={<Zumbis zumbi={zumbiAtual} />}\n      />\n\n      <FooterCard>\n        <ul>\n          <li>{cardsRemanecentes.length}/{baralho.length}</li>\n          <li>{cardAtual.collection}#{cardAtual.id}</li>\n        </ul>\n      </FooterCard>\n    </Container>\n  );\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --black: #080200;\n    --white: #e9e3d7;\n    --red: #af4b46;\n    --orange: #b36b44;\n    --yellow: #d9b258;\n    --blue: #5fa3cd;\n\n    --text-body: #969cb3;\n    --background: #171923;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    background: var(--background);\n    color: var(--text-body);\n\n    @media(max-width: 1080px){\n      font-size: 93.75%\n    }\n\n    @media(max-width: 720px){\n      font-size: 87.5%\n    }\n  }\n\n  body, input, textarea, button {\n    font-family: sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`\n","import { useEffect, useState } from 'react'\nimport { Dashboard } from \"./pages/Dashboard\";\nimport { GlobalStyle } from './styles/global'\nimport GithubCorner from 'react-github-corner';\n\nimport cards from './store.json'\n\ninterface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n    | \"abominação maculada\"\n    | \"balofo\"\n    | \"lerdo\"\n    | \"lerdo maculado\"\n    | \"corredor\"\n    | \"necromante\"\n    | \"horda\";\n}\n\ninterface CardZumbi {\n  id: number;\n  collection: string;\n  azul: PerigoZumbi;\n  amarelo: PerigoZumbi;\n  laranja: PerigoZumbi;\n  vermelho: PerigoZumbi;\n}\n\n\nfunction App() {\n  const [ typedcards, setTypedcards ] = useState([] as CardZumbi[])\n\n  useEffect(() => {\n    var t: CardZumbi[] = cards as CardZumbi[];\n    setTypedcards(t)\n  }, [])\n  return (\n  <>\n    <GlobalStyle />\n    <GithubCorner href=\"https://github.com/jooaopc/zombicards\" />\n    <Dashboard baralho={typedcards} />\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
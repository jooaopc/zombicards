{"version":3,"sources":["pages/Dashboard/Zumbis.tsx","pages/Dashboard/Perigo.tsx","pages/Dashboard/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Zumbis","zumbi","quantidade","tipo","Typography","variant","component","align","Perigo","perigo","setPerigo","RadioGroup","row","aria-label","name","FormControlLabel","control","Radio","color","onChange","_","checked","label","Dashboard","baralho","useState","cardsRemanecentes","setCardsRemanecentes","cardAtual","setCardAtual","zumbiAtual","setZumbiAtual","useEffect","length","cardsSobrando","filter","c","id","FormGroup","Button","onClick","console","log","lenght","indexCard","Math","floor","random","Casino","fontSize","App","typedcards","setTypedcards","cards","Container","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.989434b0.chunk.js","sourcesContent":["import { Typography } from \"@material-ui/core\";\n\ninterface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n    | \"abominação maculada\"\n    | \"balofo\"\n    | \"lerdo\"\n    | \"lerdo maculado\"\n    | \"corredor\"\n    | \"necromante\"\n    | \"horda\";\n}\n\ninterface ZumbisProps {\n  zumbi: PerigoZumbi;\n}\n\nexport const Zumbis = ({ zumbi }: ZumbisProps) => {\n  const nomePlural = () => {\n    if (zumbi.tipo === \"balofo\" || zumbi.tipo === \"lerdo\") {\n      return `${zumbi.tipo}s`;\n    }\n    return `${zumbi.tipo}es`;\n  };\n\n  const nenhumZumbi = () => <>não veio nada</>;\n  const ativacaoExtra = () => (\n    <>\n      <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n        <strong>nova ativação de:</strong> {nomePlural()}\n      </Typography>\n    </>\n  );\n\n  const ehVazio = () => {\n    if (!zumbi) return false;\n    return !zumbi.tipo && !zumbi.quantidade;\n  };\n\n  const ehAtivacaoExtra = () => {\n    if (!zumbi) return false;\n    return !zumbi.quantidade && zumbi.tipo;\n  };\n\n  const ehNormal = () => {\n    if (!zumbi) return false;\n    return !!zumbi.quantidade && !!zumbi.tipo;\n  };\n\n  return (\n    <>\n      {!zumbi && <div>começa</div>}\n      {ehAtivacaoExtra() && ativacaoExtra()}\n      {ehVazio() && nenhumZumbi()}\n      {ehNormal() && (\n        <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n          <strong>{zumbi.quantidade}</strong> {zumbi.tipo}\n        </Typography>\n      )}\n    </>\n  );\n};\n","import { Radio, RadioGroup, FormControlLabel } from \"@material-ui/core\";\n\ninterface PerigoProps {\n  perigo: CorPerigo;\n  setPerigo: (p: CorPerigo) => void;\n}\n\ntype CorPerigo = \"azul\" | \"amarelo\" | \"laranja\" | \"vermelho\";\n\nexport const Perigo = ({ perigo, setPerigo }: PerigoProps) => {\n  return (\n    <RadioGroup row aria-label=\"position\" name=\"perigo\">\n      <FormControlLabel\n        control={<Radio color=\"primary\" />}\n        onChange={_ => setPerigo(\"azul\")}\n        checked={perigo === \"azul\"}\n        label=\"Azul\"\n      />\n      <FormControlLabel\n        control={<Radio color=\"primary\" />}\n        onChange={_ => setPerigo(\"amarelo\")}\n        checked={perigo === \"amarelo\"}\n        label=\"Amarelo\"\n      />\n      <FormControlLabel\n        control={<Radio color=\"primary\" />}\n        onChange={_ => setPerigo(\"laranja\")}\n        checked={perigo === \"laranja\"}\n        label=\"Laranja\"\n      />\n      <FormControlLabel\n        control={<Radio color=\"primary\" />}\n        onChange={_ => setPerigo(\"vermelho\")}\n        checked={perigo === \"vermelho\"}\n        label=\"Vermelho\"\n      />\n    </RadioGroup>\n  );\n};\n","import { Button, FormGroup } from \"@material-ui/core\";\nimport { Casino } from \"@material-ui/icons\";\n\nimport { useState, useEffect } from \"react\";\nimport { Zumbis } from \"./Zumbis\";\nimport { Perigo } from \"./Perigo\";\n\ninterface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n    | \"abominação maculada\"\n    | \"balofo\"\n    | \"lerdo\"\n    | \"lerdo maculado\"\n    | \"corredor\"\n    | \"necromante\"\n    | \"horda\";\n}\n\ntype CorPerigo = \"azul\" | \"amarelo\" | \"laranja\" | \"vermelho\";\n\ninterface CardZumbi {\n  id: number;\n  azul: PerigoZumbi;\n  amarelo: PerigoZumbi;\n  laranja: PerigoZumbi;\n  vermelho: PerigoZumbi;\n}\n\ninterface DashboardProps {\n  baralho: CardZumbi[];\n}\n\nexport function Dashboard({ baralho }: DashboardProps) {\n  const [cardsRemanecentes, setCardsRemanecentes] = useState([] as CardZumbi[]);\n  const [cardAtual, setCardAtual] = useState({} as CardZumbi);\n  const [zumbiAtual, setZumbiAtual] = useState({} as PerigoZumbi);\n  const [perigo, setPerigo] = useState(\"azul\" as CorPerigo);\n\n  useEffect(() => {\n    setCardsRemanecentes(baralho);\n  }, [baralho]);\n\n  useEffect(() => {\n    setZumbiAtual(cardAtual[perigo]);\n\n    if (!cardsRemanecentes.length) {\n      const cardsEmbaralhados = baralho;\n      setCardsRemanecentes(cardsEmbaralhados);\n    } else {\n      let cardsSobrando = cardsRemanecentes.filter(c => c.id !== cardAtual.id)\n      setCardsRemanecentes(cardsSobrando)\n    }\n  }, [cardAtual, perigo, cardsRemanecentes, baralho]);\n\n  function handleProximoCard() {\n    console.log({ lenght: cardsRemanecentes.length })\n    const indexCard = Math.floor(Math.random() * (cardsRemanecentes.length - 1 - 0 + 1)) + 0\n    console.log(indexCard)\n    setCardAtual(cardsRemanecentes[indexCard]);\n  }\n\n  return (\n    <>\n      <Perigo perigo={perigo} setPerigo={setPerigo} />\n      <FormGroup>\n        <Button onClick={handleProximoCard}>\n          <Casino fontSize=\"large\" />\n        </Button>\n      </FormGroup>\n      <Zumbis zumbi={zumbiAtual} />\n      <br />\n      {cardAtual.id}\n    </>\n  );\n}\n","import { useEffect, useState } from 'react'\nimport { Dashboard } from \"./pages/Dashboard\";\nimport { Container } from \"@material-ui/core\";\n\nimport cards from './store.json'\n\ninterface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n    | \"abominação maculada\"\n    | \"balofo\"\n    | \"lerdo\"\n    | \"lerdo maculado\"\n    | \"corredor\"\n    | \"necromante\"\n    | \"horda\";\n}\n\ninterface CardZumbi {\n  id: number;\n  azul: PerigoZumbi;\n  amarelo: PerigoZumbi;\n  laranja: PerigoZumbi;\n  vermelho: PerigoZumbi;\n}\n\n\nfunction App() {\n  const [ typedcards, setTypedcards ] = useState([] as CardZumbi[])\n\n  useEffect(() => {\n    var t: CardZumbi[] = cards as CardZumbi[];\n    setTypedcards(t)\n  }, [])\n  return (\n  <Container>\n    <Dashboard baralho={typedcards} />\n  </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["pages/Dashboard/Zumbis.tsx","pages/Dashboard/Perigo.tsx","components/Card/styles.ts","components/Card/index.tsx","pages/Dashboard/styles.ts","img/zombi-spawn-cards.jpg","pages/Dashboard/index.tsx","styles/global.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Zumbis","zumbi","quantidade","tipo","Container","styled","div","Button","button","p","color","active","Perigo","perigo","setPerigo","onClick","_","InnerCard","isClicked","CardFace","Card","proximoCard","children1","children2","transformChildren1","transformChildren2","useState","setIsClicked","transformChildren1Modified","setTransformChildren1Modified","transformChildren2Modified","setTransformChildren2Modified","useEffect","className","main","perigoColor","FooterCard","perigoColorDicionario","azul","amarelo","laranja","vermelho","Dashboard","baralho","cardsRemanecentes","setCardsRemanecentes","cardAtual","setCardAtual","zumbiAtual","setZumbiAtual","setPerigoColor","cardsSobrando","filter","c","id","length","indexCard","Math","floor","random","src","spawn","alt","GlobalStyle","createGlobalStyle","App","typedcards","setTypedcards","cards","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f0f3261a.chunk.js","sourcesContent":["interface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n    | \"abominação maculada\"\n    | \"balofo\"\n    | \"lerdo\"\n    | \"lerdo maculado\"\n    | \"corredor\"\n    | \"necromante\"\n    | \"horda\";\n}\n\ninterface ZumbisProps {\n  zumbi: PerigoZumbi;\n}\n\nexport const Zumbis = ({ zumbi }: ZumbisProps) => {\n  const nomePlural = () => {\n    if (zumbi.tipo === \"balofo\" || zumbi.tipo === \"lerdo\") {\n      return `${zumbi.tipo}s`;\n    }\n    return `${zumbi.tipo}es`;\n  };\n\n  const nenhumZumbi = () => <>\n      <span>\n        não veio nada 🍀😁\n      </span>\n  </>;\n  const ativacaoExtra = () => (\n    <>\n      <span>\n        <strong>nova ativação de: </strong> {nomePlural()} 😱\n      </span>\n    </>\n  );\n\n  const ehVazio = () => {\n    if (!zumbi) return false;\n    return !zumbi.tipo && !zumbi.quantidade;\n  };\n\n  const ehAtivacaoExtra = () => {\n    if (!zumbi) return false;\n    return !zumbi.quantidade && zumbi.tipo;\n  };\n\n  const ehNormal = () => {\n    if (!zumbi) return false;\n    return !!zumbi.quantidade && !!zumbi.tipo;\n  };\n\n  return (\n    <>\n      {!zumbi && <div>Começar?</div>}\n      {ehAtivacaoExtra() && ativacaoExtra()}\n      {ehVazio() && nenhumZumbi()}\n      {ehNormal() && (\n        <span>\n          🔥 <strong>{zumbi.quantidade}</strong> {zumbi.tipo} 🔥\n        </span>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  padding-bottom: 1rem;\n  justify-content: center;\n`\n\ninterface ButtonProps {\n  active: boolean;\n  color: string;\n}\n\nconst Button = styled.button<ButtonProps>`\n  padding: 1rem;\n\n  background: var(--${p => p.color});\n  opacity: ${p => p.active ? '1' : '0.6'};\n  border: ${p => p.active ? '0.5rem solid black' : '0px'};\n  font-weight: bold;\n`\n\ninterface PerigoProps {\n  perigo: CorPerigo;\n  setPerigo: (p: CorPerigo) => void;\n}\n\ntype CorPerigo = \"azul\" | \"amarelo\" | \"laranja\" | \"vermelho\";\n\nexport const Perigo = ({ perigo, setPerigo }: PerigoProps) => {\n  return (\n      <Container>\n        <Button\n          color=\"blue\"\n          active={perigo === \"azul\"}\n          onClick={_ => setPerigo(\"azul\")}\n        >\n          Azul\n        </Button>\n\n        <Button\n          color=\"yellow\"\n          active={perigo === \"amarelo\"}\n          onClick={_ => setPerigo(\"amarelo\")}\n        >\n          Amarelo\n        </Button>\n\n        <Button\n          color=\"orange\"\n          active={perigo === \"laranja\"}\n          onClick={_ => setPerigo(\"laranja\")}\n        >\n          Laranja\n        </Button>\n\n        <Button\n          color=\"red\"\n          active={perigo === \"vermelho\"}\n          onClick={_ => setPerigo(\"vermelho\")}\n        >\n          Vermelho\n        </Button>\n      </Container>\n  );\n};\n","import styled from 'styled-components'\n\ninterface ZombieButton {\n  isClicked: boolean\n}\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nexport const Button = styled.button`\n  background: transparent;\n  border: 0;\n  padding: 0;\n\n  width: 100%;\n  max-width: 300px;\n\n  perspective: 1000px;\n`\n\nexport const InnerCard = styled.div<ZombieButton>`\n  padding-top: 155%;\n  width: 100%;\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n\n  transform: ${(p) => p.isClicked ? 'rotateY(180deg)' : 'none'};\n  content: ${(p) => p.isClicked ? '' : ''};\n\n  position:relative;\n  float: left;\n`\n\nexport const CardFace = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  backface-visibility: hidden;\n  background-image: linear-gradient(#6a1610, #c82b2c, #6a1610);\n  border-radius: 10px;\n\n  div + & {\n    transform: rotateY(180deg);\n  }\n\n  & > * {\n    border: 2px solid var(--black);\n    background: var(--white);\n    flex: content;\n    margin: 10%;\n  }\n\n  .empty {\n    border: 0;\n    margin: 0;\n    padding: 0;\n  }\n\n\n  img {\n    border: 0;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    max-width: 300px;\n    border-radius: 10px;\n  }\n`\n","import { useState, useEffect, ReactNode } from 'react'\n\nimport { Container, Button, InnerCard, CardFace } from './styles'\n\ninterface CardProps {\n  proximoCard: () => void;\n  children1: ReactNode;\n  transformChildren1?: ReactNode;\n  children2: ReactNode;\n  transformChildren2?: ReactNode;\n}\n\n// THANKS:\n// - https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_flip_card\n// - https://codepen.io/desandro/pen/LmWoWe\n// - https://stackoverflow.com/a/12121309\n// - https://www.w3schools.com/howto/howto_css_aspect_ratio.asp\nexport function Card({\n  proximoCard,\n  children1,\n  children2,\n  transformChildren1,\n  transformChildren2\n}: CardProps) {\n  const [ isClicked, setIsClicked ] = useState(false)\n  const [ transformChildren1Modified, setTransformChildren1Modified ] = useState(transformChildren1)\n  const [ transformChildren2Modified, setTransformChildren2Modified ] = useState(transformChildren2)\n\n  useEffect(() => {\n    if(!transformChildren1){\n      setTransformChildren1Modified(<span className=\"empty\"></span>)\n    }\n  }, [transformChildren1])\n\n  useEffect(() => {\n    if(!transformChildren2){\n      setTransformChildren2Modified(<span className=\"empty\"></span>)\n    }\n  }, [transformChildren2])\n\n  function handleClick(){\n    proximoCard()\n    setIsClicked(!isClicked)\n  }\n  return (\n    <Container onClick={handleClick} >\n      <Button>\n      <InnerCard isClicked={isClicked}>\n        <CardFace className=\"card front\">\n          {isClicked && transformChildren1Modified}\n          {!isClicked && children1}\n        </CardFace>\n        <CardFace className=\"card back\">\n          {!isClicked && transformChildren2Modified}\n          {isClicked && children2}\n        </CardFace>\n      </InnerCard>\n      </Button>\n    </Container>\n  )\n}\n","import styled from 'styled-components'\n\ninterface ContainerProps {\n  perigoColor: string;\n}\n\nexport const Container = styled.main<ContainerProps>`\n  margin: 0 0;\n  padding: 2.5rem 1rem;\n  height: 100vh;\n\n  background-image: linear-gradient(to top, var(--${p => p.perigoColor}), var(--background));\n`\n\nexport const FooterCard = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n\n  color: black;\n\n  ul {\n    margin-right: 1rem;\n  }\n`\n","export default __webpack_public_path__ + \"static/media/zombi-spawn-cards.e3e0bf1a.jpg\";","import { useState, useEffect } from \"react\";\nimport { Zumbis } from \"./Zumbis\";\nimport { Perigo } from \"./Perigo\";\nimport { Card } from \"../../components/Card\";\n\nimport { Container, FooterCard } from './styles'\n\nimport spawn from '../../img/zombi-spawn-cards.jpg'\n\nconst perigoColorDicionario = {\n  azul: \"blue\",\n  amarelo: \"yellow\",\n  laranja: \"orange\",\n  vermelho: \"red\"\n}\n\ninterface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n      | \"abominação maculada\"\n        | \"balofo\"\n          | \"lerdo\"\n            | \"lerdo maculado\"\n              | \"corredor\"\n                | \"necromante\"\n                  | \"horda\";\n}\n\ntype CorPerigo = \"azul\" | \"amarelo\" | \"laranja\" | \"vermelho\";\n\ninterface CardZumbi {\n  id: number;\n  azul: PerigoZumbi;\n  amarelo: PerigoZumbi;\n  laranja: PerigoZumbi;\n  vermelho: PerigoZumbi;\n}\n\ninterface DashboardProps {\n  baralho: CardZumbi[];\n}\n\nexport function Dashboard({ baralho }: DashboardProps) {\n  const [cardsRemanecentes, setCardsRemanecentes] = useState([] as CardZumbi[]);\n  const [cardAtual, setCardAtual] = useState({} as CardZumbi);\n  const [zumbiAtual, setZumbiAtual] = useState({} as PerigoZumbi);\n  const [perigo, setPerigo] = useState(\"azul\" as CorPerigo);\n  const [perigoColor, setPerigoColor] = useState(\"\");\n\n  useEffect(() => {\n    setCardsRemanecentes(baralho);\n  }, [baralho]);\n\n  useEffect(() => {\n    setZumbiAtual(cardAtual[perigo]);\n\n    let cardsSobrando = cardsRemanecentes.filter(c => c.id !== cardAtual.id)\n\n    if (!!cardsRemanecentes.length && cardsSobrando.length !== cardsRemanecentes.length) {\n      setCardsRemanecentes(cardsSobrando)\n    }\n  }, [cardAtual, perigo, cardsRemanecentes]);\n\n  useEffect(() => {\n    if (!cardsRemanecentes.length) {\n      const cardsEmbaralhados = baralho;\n      setCardsRemanecentes(cardsEmbaralhados);\n    }\n  }, [cardsRemanecentes, baralho])\n\n  useEffect(() => {\n    setPerigoColor(perigoColorDicionario[perigo])\n  }, [perigo]);\n\n  function handleProximoCard() {\n    const indexCard = Math.floor(Math.random() * (cardsRemanecentes.length - 1 - 0 + 1)) + 0\n    setCardAtual(cardsRemanecentes[indexCard]);\n  }\n\n  return (\n    <Container\n      perigoColor={perigoColor}\n    >\n      \n      <Perigo perigo={perigo} setPerigo={setPerigo} />\n\n      <Card\n        proximoCard={handleProximoCard}\n        children1={!!zumbiAtual ? <Zumbis zumbi={zumbiAtual} /> : <img src={spawn} alt=\"verso carta de zumbi\"/>}\n        children2={<Zumbis zumbi={zumbiAtual} />}\n      />\n\n      <FooterCard>\n        <ul>\n          <li>id: {cardAtual.id}</li>\n          <li>{cardsRemanecentes.length}/{baralho.length}</li>\n        </ul>\n      </FooterCard>\n    </Container>\n  );\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --black: #080200;\n    --white: #e9e3d7;\n    --red: #af4b46;\n    --orange: #b36b44;\n    --yellow: #d9b258;\n    --blue: #5fa3cd;\n\n    --text-body: #969cb3;\n    --background: #171923;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    background: var(--background);\n    color: var(--text-body);\n\n    @media(max-width: 1080px){\n      font-size: 93.75%\n    }\n\n    @media(max-width: 720px){\n      font-size: 87.5%\n    }\n  }\n\n  body, input, textarea, button {\n    font-family: sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`\n","import { useEffect, useState } from 'react'\nimport { Dashboard } from \"./pages/Dashboard\";\nimport { GlobalStyle } from './styles/global'\n\nimport cards from './store.json'\n\ninterface PerigoZumbi {\n  quantidade: number;\n  tipo:\n    | \"abominação\"\n    | \"abominação maculada\"\n    | \"balofo\"\n    | \"lerdo\"\n    | \"lerdo maculado\"\n    | \"corredor\"\n    | \"necromante\"\n    | \"horda\";\n}\n\ninterface CardZumbi {\n  id: number;\n  azul: PerigoZumbi;\n  amarelo: PerigoZumbi;\n  laranja: PerigoZumbi;\n  vermelho: PerigoZumbi;\n}\n\n\nfunction App() {\n  const [ typedcards, setTypedcards ] = useState([] as CardZumbi[])\n\n  useEffect(() => {\n    var t: CardZumbi[] = cards as CardZumbi[];\n    setTypedcards(t)\n  }, [])\n  return (\n  <>\n    <GlobalStyle />\n    <Dashboard baralho={typedcards} />\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}